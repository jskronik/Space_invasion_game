import random
import pygame
import sys
from time import sleep
from bullet import Bullet
from bullet import Alien_bullet
from alien import Alien

def check_keydown_events(event, ai_settings, screen, stats, ship, bullets):
    """Response to key press"""
    if event.key == pygame.K_RIGHT:
        ship.moving_right = True
    elif event.key == pygame.K_LEFT:
        ship.moving_left = True
    # create a new bullet and add it to the bullet group
    elif event.key == pygame.K_SPACE:
        fire_bullets(ai_settings, screen, ship, bullets)
    elif event.key == pygame.K_q:
        filename = 'highscore.txt'
        with open(filename, 'w') as f:
            f.write(str(stats.high_score))
        sys.exit()

def check_keyup_events(event, ship):
    """Response to key release"""
    if event.key == pygame.K_RIGHT:
        ship.moving_right = False
    elif event.key == pygame.K_LEFT:
        ship.moving_left = False

def check_play_button(ai_settings, screen, stats, sb, play_button, ship, aliens, bullets, mouse_x, mouse_y, alien_bullets):
    """Starting a new game when the user clicks the start button"""
    button_clicked = play_button.rect.collidepoint(mouse_x, mouse_y)
    if button_clicked and not stats.game_active:
        # Resetting game settings
        ai_settings.initialize_dynamic_settings()
        pygame.mouse.set_visible(False)
        stats.reset_stats()
        stats.game_active = True
        # Resetting scoreboard images
        sb.prep_score()
        sb.prep_high_score()
        sb.prep_level()
        sb.prep_ships()
        sb.show_score()
        # Deleting the contents of aliens and bullets lists
        aliens.empty()
        bullets.empty()
        alien_bullets.empty()
        create_fleet(ai_settings, screen, ship, aliens)
        ship.center_ship()

def check_events(ai_settings, screen, stats, sb, play_button, ship, aliens, bullets, alien_bullets):
    """Reaction to events generated by keyboard and mouse"""
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            filename = 'highscore.txt'
            with open(filename, 'w') as f:
                f.write(str(stats.high_score))
            sys.exit()
        elif event.type == pygame.KEYDOWN:
            check_keydown_events(event, ai_settings, screen, stats, ship, bullets)
        elif event.type == pygame.KEYUP:
            check_keyup_events(event, ship)
        elif event.type == pygame.MOUSEBUTTONDOWN:
            mouse_x, mouse_y = pygame.mouse.get_pos()
            check_play_button(ai_settings, screen, stats, sb, play_button,ship, aliens, bullets, mouse_x, mouse_y, alien_bullets)

def update_screen(ai_settings, screen, stats, sb, ship, aliens, bullets, play_button, alien_bullets):
    """Update images on screen during each pass through the loop"""
    # Refreshing the screen during each iteration of the loop
    screen.fill(ai_settings.bg_color)

    # Redisplay of all bullets under ship and alien layers
    for bullet in bullets.sprites():
        bullet.draw_bullet()
    ship.blitme()
    aliens.draw(screen)
    sb.show_score()

    # Display play button if the game is inactive
    if not stats.game_active:
        play_button.draw_button()

    if stats.game_active:
        # Redraw alien bullets
        for alien_bullet in alien_bullets.sprites():
            alien_bullet.draw_alien_bullet()

        # Make the aliens shoot randomly
        if random.randrange(0, 1500) == 1:
            fire_alien_bullets(ai_settings, screen, aliens, alien_bullets)

        # Check bullet-bullet collisions
        pygame.sprite.groupcollide(bullets, alien_bullets, True, True)

    # Make sure the most recently drawn screen is visible
    pygame.display.flip()

def fire_bullets(ai_settings, screen, ship, bullets):
    """Firing a bullet if the limit of available bullets is not exceeded"""
    # Create a new bullet and add it to the bullets group
    if len(bullets) < ai_settings.bullets_allowed:
        new_bullet = Bullet(ai_settings, screen, ship)
        bullets.add(new_bullet)

def fire_alien_bullets(ai_settings, screen, aliens, alien_bullets):
    """Firing a bullet if the limit of available bullets is not exceeded"""
    # Create a new alien bullet and add it to the alien bullets group
    if len(alien_bullets) < ai_settings.alien_bullets_allowed:
        new_bullet = Alien_bullet(ai_settings, screen, aliens)
        alien_bullets.add(new_bullet)

def update_bullets(ai_settings, screen, stats, sb, ship, aliens, bullets):
    """Update of bullet positions and removal of invisible ones on the screen"""
    # Bullets position update
    bullets.update()

    # Removing bullets which are outside the screen
    for bullet in bullets.copy():
        if bullet.rect.bottom <= 0:
            bullets.remove(bullet)
    check_bullet_alien_collisions(ai_settings, screen, stats, sb, ship, aliens, bullets)

def update_alien_bullets(ai_settings, alien_bullets):
    """Update position of alien bullets and removal of invisible ones on the screen"""
    # Alien bullets position update
    alien_bullets.update()

    # Removing bullets which are outside the screen
    for alien_bullet in alien_bullets.copy():
        if alien_bullet.rect.top >= ai_settings.screen_height:
            alien_bullets.remove(alien_bullet)

def check_bullet_alien_collisions(ai_settings, screen, stats, sb, ship, aliens, bullets):
    # Check if any of the bullets hit the alien
    # If yes, we are removing bullet and alien
    collisions = pygame.sprite.groupcollide(bullets, aliens, True, True)
    if collisions:
        for aliens in collisions.values():
            stats.score += ai_settings.alien_points * len(aliens)
            sb.prep_score()
        check_high_score(stats, sb)
    if len(aliens) == 0:
        bullets.empty()

        # Speed up game
        ai_settings.increase_speed()

        # Incrementing the level number
        stats.level += 1
        sb.prep_level()

        create_fleet(ai_settings, screen, ship, aliens)

def get_number_aliens(ai_settings, alien_width):
    """Determine the number of aliens that will fit in the row"""
    available_space_x = ai_settings.screen_width - 2 * alien_width
    number_aliens_x = int(available_space_x / (2 * alien_width))
    return number_aliens_x

def get_number_rows(ai_settings, ship_height, alien_height):
    """Determine the number of rows of aliens"""
    available_space_y = (ai_settings.screen_height - (3 * alien_height) - ship_height)
    number_rows = int(available_space_y / (2 * alien_height))
    return number_rows

def create_alien(ai_settings, screen, aliens, alien_number, row_number):
    """Creating an alien and placing it in a row"""
    alien = Alien(ai_settings, screen)
    alien_width = alien.rect.width
    alien.x = alien_width + 2 * alien_width * alien_number
    alien.rect.x = alien.x
    alien.rect.y = alien.rect.height + 2 * alien.rect.height * row_number
    aliens.add(alien)

def create_fleet(ai_settings, screen, ship, aliens):
    """Creating a full fleet of aliens"""
    alien = Alien(ai_settings, screen)
    number_aliens_x = get_number_aliens(ai_settings, alien.rect.width)
    number_rows = get_number_rows(ai_settings, ship.rect.height, alien.rect.height)

    # Creating first row of aliens fleet
    for row_number in range(number_rows):
        for alien_number in range(number_aliens_x):
            create_alien(ai_settings, screen, aliens, alien_number, row_number)

def update_aliens(ai_settings, screen, stats, sb, ship, aliens, bullets, alien_bullets):
    """Check if the fleet is at the edge of the screen and then update the location of all aliens in the fleet"""
    check_fleet_edges(ai_settings, aliens)
    aliens.update()

    if pygame.sprite.spritecollideany(ship, aliens):
        ship_hit(ai_settings, screen, stats, sb, ship, aliens, bullets, alien_bullets)

    if pygame.sprite.spritecollideany(ship, alien_bullets):
        ship_hit(ai_settings, screen, stats, sb, ship, aliens, bullets, alien_bullets)

    check_aliens_bottom(ai_settings, screen, stats, sb, ship, aliens, bullets, alien_bullets)

def check_fleet_edges(ai_settings, aliens):
    """Appropriate reaction when an alien reaches the edge of the screen"""
    for alien in aliens.sprites():
        if alien.check_edges():
            change_fleet_direction(ai_settings, aliens)
            break

def change_fleet_direction(ai_settings, aliens):
    """Moving the entire fleet down and changing the direction in which it moves"""
    for alien in aliens.sprites():
        alien.rect.y += ai_settings.fleet_drop_speed
    ai_settings.fleet_direction *= -1

def ship_hit(ai_settings, screen, stats, sb, ship, aliens, bullets, alien_bullets):
    """Reaction for alien colision with ship"""
    if stats.ships_left > 0:
        stats.ships_left -= 1
        enemies = []
        for alien in aliens:
            enemies.append(alien.rect.y)

        aliens.empty()
        bullets.empty()
        alien_bullets.empty()
        sb.prep_ships()

        # Create new aliens fleet and center ship
        create_fleet(ai_settings, screen, ship, aliens)
        ship.center_ship()

        # Pause
        sleep(0.8)
    else:
        stats.game_active = False
        pygame.mouse.set_visible(True)

def check_aliens_bottom(ai_settings, screen, stats, sb, ship, aliens, bullets, alien_bullets):
    """Checking if any alien have crossed the bottom border of the screen"""
    screen_rect = screen.get_rect()
    for alien in aliens.sprites():
        if alien.rect.bottom >= screen_rect.bottom:
            ship_hit(ai_settings, screen, stats, sb, ship, aliens, bullets, alien_bullets)
            break

def check_high_score(stats, sb):
    """Checking if we have a new best score so far in the game"""
    if stats.score > stats.high_score:
        stats.high_score = stats.score
        sb.prep_high_score()

def load_score(stats):
    """Read the high score from highscore txt file"""
    filename = 'highscore.txt'
    try:
        with open(filename) as f:
            score = f.read()
            stats.high_score = int(score)
    except FileNotFoundError:
        pass